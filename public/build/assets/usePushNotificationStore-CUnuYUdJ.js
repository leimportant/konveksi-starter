import{U as a,b as o}from"./app-DVcE8dC8.js";const c="BFhuAkBPxt7Entla9XXTPMX9lEE6fC53hv78zM_sO8utv65lzMz_WKI6Q6eid3sC8sPYBUmoG-a4vdpn0v23M7k";function u(s){console.log("Using VAPID key:",s.substring(0,10)+"...");const i="=".repeat((4-s.length%4)%4),r=(s+i).replace(/\-/g,"+").replace(/_/g,"/"),t=window.atob(r);return Uint8Array.from([...t].map(e=>e.charCodeAt(0)))}const h=a("pushNotification",{state:()=>({isSubscribed:!1,error:"",subscription:null,swRegistration:null}),actions:{async checkSubscription(){try{if(!("serviceWorker"in navigator)||!("PushManager"in window))return this.error="Push notifications are not supported in your browser.",!1;const s=await navigator.serviceWorker.getRegistration("/service-worker.js");if(!s)return console.log("No service worker registration found"),!1;this.swRegistration=s;const i=await s.pushManager.getSubscription();return i?(console.log("Existing push subscription found"),this.subscription=i,this.isSubscribed=!0,!0):!1}catch(s){return console.error("Error checking subscription:",s),this.error=s instanceof Error?s.message:String(s),!1}},async subscribe(){if(this.error=null,!("serviceWorker"in navigator)||!("PushManager"in window)){this.error="Push notifications are not supported in your browser.";return}try{if(await this.checkSubscription()){console.log("Already subscribed to push notifications");return}if(!this.swRegistration&&(console.log("Registering service worker..."),this.swRegistration=await navigator.serviceWorker.register("/service-worker.js",{scope:"/"}),this.swRegistration.installing)){console.log("Service worker installing...");const r=this.swRegistration.installing||this.swRegistration.waiting;await new Promise(t=>{if(!r){t();return}r.addEventListener("statechange",e=>{const n=e.target;console.log("Service worker state changed:",n.state),n.state==="activated"&&(console.log("Service worker activated"),t())})})}if(await Notification.requestPermission()!=="granted"){this.error="Notification permission denied";return}console.log("Subscribing to push notifications..."),this.subscription=await this.swRegistration.pushManager.subscribe({userVisibleOnly:!0,applicationServerKey:u(c)}),console.log("Push subscription:",this.subscription),await o.post("/api/push/subscribe",this.subscription,{headers:{"Content-Type":"application/json"}}),this.isSubscribed=!0,console.log("Successfully subscribed to push notifications")}catch(s){console.error("Subscription error:",s),this.error=s instanceof Error?s.message:String(s)}},async send(){if(this.error=null,!this.isSubscribed){this.error="You must subscribe to push notifications first.";return}try{const s=await o.post("/api/push/send",{},{headers:{"Content-Type":"application/json"}});return console.log("Push notification sent:",s.data),s.data}catch(s){console.error("Error sending push notification:",s),this.error=s instanceof Error?s.message:String(s)}},async unsubscribe(){this.error=null;try{!this.subscription&&this.swRegistration&&(this.subscription=await this.swRegistration.pushManager.getSubscription()),this.subscription&&(await this.subscription.unsubscribe(),await o.post("/api/push/unsubscribe",this.subscription,{headers:{"Content-Type":"application/json"}}),this.subscription=null,this.isSubscribed=!1,console.log("Successfully unsubscribed from push notifications"))}catch(s){console.error("Error unsubscribing:",s),this.error=s instanceof Error?s.message:String(s)}}}});export{h as u};
