import{U as o,b as a}from"./app-DwD40pha.js";const d=o("productPrice",{state:()=>({productPrices:[],total:0,loading:!1,loaded:!1,currentPage:1,filterName:"",products:[],priceTypes:[],uoms:[],sizes:[]}),actions:{async fetchProductPrice(e=1,t=10){this.loading=!0;try{const r=await a.get("/api/product-prices",{params:{page:e,perPage:t,search:this.filterName}});this.productPrices=r.data.data,this.total=r.data.total}catch(r){throw console.error("Failed to fetch product prices:",r),r}finally{this.loading=!1}},setFilter(e,t){e==="name"&&(this.filterName=t,console.log("Filter set:",this.filterName),this.fetchProductPrice(1))},async fetchProductPriceById(e){try{return(await a.get(`/api/product-prices/${e}`)).data}catch(t){throw console.error("Failed to fetch product price by ID:",t),t}},async createProductPrice(e){try{const t=await a.post("/api/product-prices",e);return this.productPrices.unshift(t.data),this.total++,t.data}catch(t){throw console.error("Failed to create product price:",t),t}},async updateProductPrice(e,t){try{const r=await a.put(`/api/product-prices/${e}`,t),s=this.productPrices.findIndex(c=>c.id===e);return s!==-1&&(this.productPrices[s]=r.data),r.data}catch(r){throw console.error("Failed to update product price:",r),r}},async deleteProductPrice(e){try{await a.delete(`/api/product-prices/${e}`);const t=this.productPrices.findIndex(r=>r.id===e);t!==-1&&(this.productPrices.splice(t,1),this.total--)}catch(t){throw console.error("Failed to delete product price:",t),t}},async fetchAll(){try{const[e,t,r,s]=await Promise.all([a.get("/api/products"),a.get("/api/price-types"),a.get("/api/uoms"),a.get("/api/sizes")]);this.products=e.data.data,this.priceTypes=t.data.data,this.uoms=r.data.data,this.sizes=s.data.data}catch(e){console.error("Failed to fetch auxiliary data:",e)}}}});export{d as u};
