import{U as s,b as r}from"./app-D3IMWQF4.js";const d=s("goodReceive",{state:()=>({items:[],total:0,loading:!1,loaded:!1,currentPage:1,filterName:""}),actions:{async fetchGoodReceives(t=1,e=10){this.loading=!0;try{const o=await r.get("/api/good-receive",{params:{page:t,perPage:e,name:this.filterName}});this.items=o.data.data,this.total=o.data.total,this.loaded=!0}catch(o){throw console.error("Error fetching good receives:",o),o}finally{this.loading=!1}},async fetchGoodReceivesById(t){try{const e=await r.get(`/api/good-receive/${t}`);if(!e.data||!e.data.data)throw new Error("Data not found");return e.data}catch(e){throw console.error("Error fetching good receive by id:",e),e}},setFilter(t,e){t==="name"&&(this.filterName=e,this.currentPage=1,this.fetchGoodReceives(1))},async createGoodReceive(t){try{const e=await r.post("/api/good-receive",t);return this.items.unshift(e.data),this.total++,e.data}catch(e){throw console.error("Error creating good receive:",e),e}},async updateGoodReceive(t,e){try{const o=await r.put(`/api/good-receive/${t}`,e),a=this.items.findIndex(i=>i.id===t);return a!==-1&&(this.items[a]=o.data),o.data}catch(o){throw console.error("Error updating good receive:",o),o}},async deleteGoodReceive(t){try{await r.delete(`/api/good-receive/${t}`);const e=this.items.findIndex(o=>o.id===t);e!==-1&&(this.items.splice(e,1),this.total--)}catch(e){throw console.error("Error deleting good receive:",e),e}}}});export{d as u};
