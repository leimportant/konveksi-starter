import{R as f,r as a,d as u,o as d}from"./app-D_hq2xh5.js";const m=f("storeCookies",()=>{const s=a(!1),o=a(null),t=a(!1);function c(n){const e=document.cookie.match(new RegExp("(^| )"+n+"=([^;]+)"));return e?decodeURIComponent(e[2]):null}async function i(n){s.value=!0,o.value=null,t.value=!1;try{await fetch("/sanctum/csrf-cookie",{method:"GET",credentials:"include"});const e=c("XSRF-TOKEN");console.log("XSRF-TOKEN:",e);const r=await fetch("/api/transfer-cookies",{method:"POST",headers:{"Content-Type":"application/json","X-XSRF-TOKEN":e||""},credentials:"include",body:JSON.stringify({childUrl:n})});if(!r.ok){const l=await r.json();throw new Error(l.message||"Transfer failed")}t.value=!0,window.location.href=n}catch(e){o.value=(e==null?void 0:e.message)||"Network or CSRF error",console.error("Failed to transfer cookie:",o.value)}finally{s.value=!1}}return{isTransferring:s,transferError:o,transferSuccess:t,transferCookies:i}}),k=u({__name:"ChatbotPage",setup(s){const o="http://localhost:3000",t=m();return d(()=>{t.transferCookies(o)}),()=>{}}});export{k as default};
