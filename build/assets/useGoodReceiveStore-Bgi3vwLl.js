import{d as s,a as r}from"./app-C0ZtNFPV.js";const d=s("goodReceive",{state:()=>({items:[],total:0,loading:!1,loaded:!1}),actions:{async fetchGoodReceives(o=1,e=10){this.loading=!0;try{const t=await r.get(`/api/good-receive?page=${o}&perPage=${e}`);this.items=t.data.data,this.total=t.data.total,this.loaded=!0}catch(t){throw console.error("Error fetching good receives:",t),t}finally{this.loading=!1}},async fetchGoodReceivesById(o){try{const e=await r.get(`/api/good-receive/${o}`);if(!e.data||!e.data.data)throw new Error("Data not found");return e.data}catch(e){throw console.error("Error fetching good receive by id:",e),e}},async createGoodReceive(o){try{const e=await r.post("/api/good-receive",o);return this.items.unshift(e.data),this.total++,e.data}catch(e){throw console.error("Error creating good receive:",e),e}},async updateGoodReceive(o,e){try{const t=await r.put(`/api/good-receive/${o}`,e),a=this.items.findIndex(i=>i.id===o);return a!==-1&&(this.items[a]=t.data),t.data}catch(t){throw console.error("Error updating good receive:",t),t}},async deleteGoodReceive(o){try{await r.delete(`/api/good-receive/${o}`);const e=this.items.findIndex(t=>t.id===o);e!==-1&&(this.items.splice(e,1),this.total--)}catch(e){throw console.error("Error deleting good receive:",e),e}}}});export{d as u};
